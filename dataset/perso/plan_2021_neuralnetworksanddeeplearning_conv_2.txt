#### Libraries
# Standard library
import cPickle
import gzip

# Third-party libraries
import numpy as np
import theano
import theano.tensor as T
from theano.tensor.nnet import conv
from theano.tensor.nnet import softmax
from theano.tensor import shared_randomstreams
from theano.tensor.signal import downsample

# Activation functions for neurons
def linear(z): return z
def ReLU(z): return T.maximum(0.0, z)
from theano.tensor.nnet import sigmoid
from theano.tensor import tanh


#### Constants
GPU = True
if GPU:
    print "Trying to run under a GPU.  If this is not desired, then modify "+\
        "network3.py\nto set the GPU flag to False."
    try: theano.config.device = 'gpu'
    except: pass # it's already set
    theano.config.floatX = 'float32'
else:
    print "Running with a CPU.  If this is not desired, then the modify "+\
        "network3.py to set\nthe GPU flag to True."
		
#### Load the MNIST data
def load_data_shared(filename="../data/mnist.pkl.gz"):
.........

#### Main class used to construct and train networks
class Network(object):
.........

#### Define layer types

class ConvPoolLayer(object):
.........

class FullyConnectedLayer(object):
.........

class SoftmaxLayer(object):
.........

http://www.hidasi.eu/rsss17/theano_cheatsheet.pdf
#### Miscellanea
def size(data):
.........

def dropout_layer(layer, p_dropout):
.........

"""---------------------------"""
"""---------------------------"""
#### Main class used to construct and train networks
class Network(object):

    def __init__(self, layers, mini_batch_size):
        """Takes a list of `layers`, describing the network architecture, and
        a value for the `mini_batch_size` to be used during training
        by stochastic gradient descent.

        """
        self.layers = layers  """ layers|mini_batch_size|self.params = [param for layer in self.layers for param in layer.params] """
		.....
        self.x = T.matrix("x") 		|  self.y = T.ivector("y")
        init_layer = self.layers[0]	|  init_layer.set_inpt(self.x, self.x, self.mini_batch_size)
        for j in xrange(1, len(self.layers)):
            prev_layer, layer  = self.layers[j-1], self.layers[j]
            layer.set_inpt(
                prev_layer.output, prev_layer.output_dropout, self.mini_batch_size)
        self.output = self.layers[-1].output
        self.output_dropout = self.layers[-1].output_dropout

    def SGD(self, training_data, epochs, mini_batch_size, eta,
            validation_data, test_data, lmbda=0.0):
        """Train the network using mini-batch stochastic gradient descent."""
        training_x, training_y = training_data
        validation_x, validation_y = validation_data
        test_x, test_y = test_data

        # compute number of minibatches for training, validation and testing
        num_training_batches = size(training_data)/mini_batch_size
        num_validation_batches = size(validation_data)/mini_batch_size
        num_test_batches = size(test_data)/mini_batch_size

        # define the (regularized) cost function, symbolic gradients, and updates
        l2_norm_squared = sum([(layer.w**2).sum() for layer in self.layers])
        cost = self.layers[-1].cost(self)+\
		""".....l2_norm_squared /num_training_batches """
        grads = T.grad(cost, self.params)
        updates = [(param, param-eta*grad)
		            for param, grad in zip(self.params, grads)]
		
        # define functions to train a mini-batch, and to compute the
        # accuracy in validation and test mini-batches.
        i = T.lscalar() # mini-batch index
        train_mb = theano.function(
		""".....cost|updates|training_x|training_y"""
		validate_mb_accuracy = theano.function(
		""".....validation_x|validation_y"""
		test_mb_accuracy = theano.function(
		"""....."""
		self.test_mb_predictions = theano.function(
		""".....self.mini_batch_size"""
        # Do the actual training
        best_validation_accuracy = 0.0
        for epoch in xrange(epochs):
            for minibatch_index in xrange(num_training_batches):		""".....num_training_batches"""
                iteration = num_training_batches*epoch+minibatch_index
                if iteration % 1000 == 0:
                    print("Training mini-batch number {0}".format(iteration))
                cost_ij = train_mb(minibatch_index) 					""".....train_mb"""
                if (iteration+1) % num_training_batches == 0:			""".....num_training_batches | num_validation_batches |validate_mb_accuracy |num_validation_batches"""
                    validation_accuracy = np.mean(
                        [validate_mb_accuracy(j) for j in xrange(num_validation_batches)])
                    print("Epoch {0}: validation accuracy {1:.2%}".format(
                        epoch, validation_accuracy))
                    if validation_accuracy >= best_validation_accuracy:
                        print("This is the best validation accuracy to date.")
                        best_validation_accuracy = validation_accuracy
                        best_iteration = iteration
                        if test_data:
                            test_accuracy = np.mean(
                                [test_mb_accuracy(j) for j in xrange(num_test_batches)]) """.....test_mb_accuracy|num_test_batches"""
                            print('The corresponding test accuracy is {0:.2%}'.format(
                                test_accuracy))
		""".....train_mb|num_training_batches|validate_mb_accuracy|num_validation_batches|test_mb_accuracy|num_test_batches"""
        print("Finished training network.")
        print("Best validation accuracy of {0:.2%} obtained at iteration {1}".format(
            best_validation_accuracy, best_iteration))
        print("Corresponding test accuracy of {0:.2%}".format(test_accuracy))
"""---------------------------"""
"""---------------------------"""

class ConvPoolLayer(object):

"""---------------------------"""
"""---------------------------"""

class FullyConnectedLayer(object):

"""---------------------------"""
"""---------------------------"""

class SoftmaxLayer(object):

"""---------------------------"""
"""---------------------------"""
